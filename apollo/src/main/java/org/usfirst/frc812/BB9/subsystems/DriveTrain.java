// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc812.BB9.subsystems;

import org.usfirst.frc812.BB9.Robot;
import org.usfirst.frc812.BB9.RobotMap;
import org.usfirst.frc812.BB9.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

/**
 *
 */
public class DriveTrain extends Subsystem {

	public double lastX, lastY, lastRotate;
	public boolean motionlock = false;

 	private final DifferentialDrive robotDrive = RobotMap.dtProductionRobotDrive;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void takeJoystickInputs(Joystick js) {
    	
// For 2019 we are using curvaturedrive which is an wpilib version
// of cheezy drive. Our powertrim function is likely not needed
//    	lastX = powerTrim(js.getRawAxis(0)); // right  joystick X axis == 0 
//    	lastY = -powerTrim(js.getRawAxis(1)); // right  joystick Y axis == 1
		lastX = js.getRawAxis(0); // right  joystick X axis == 0 
		lastY = -js.getRawAxis(1); // right  joystick Y axis == 1
    	Robot.nttable.getEntry("Quick turn:").setBoolean(Robot.controlBoxSubsystem.isSet(7));
    	robotDrive.curvatureDrive(lastY, lastX, ! Robot.controlBoxSubsystem.isSet(7));
    }

    public double powerTrim(double value) {
 
    	if( value >= 0.5) {
    		return(0.5);
    	} else if( value <= -0.5) {
    		return(-0.5);
    	} else {
    		return(value);
    	}
    }

	public void stop() {
    	robotDrive.curvatureDrive(0.0, 0.0, true);
    }
    
    public void start() {
	}

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    	setDefaultCommand(new DriveWithJoysticks());
    }

	public void drive(double accel, int i) {
		// TODO Auto-generated method stub
		
	}
}

