// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc812.BB9;

import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
//import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.SpeedControllerGroup;

// import edu.wpi.first.wpilibj.TalonSRX;
import com.ctre.phoenix.motorcontrol.can.*;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

//import com.ctre.CANTalon;

import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.AnalogInput;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	public static WPI_TalonSRX leftRear;
	public static WPI_TalonSRX rightFront;
	public static WPI_TalonSRX rightRear;
	public static WPI_TalonSRX leftFront;
	public static DoubleSolenoid frontLift;
	public static DoubleSolenoid backLift;
	public static Encoder leftEncoder;
	public static Encoder rightEncoder;
	public static WPI_TalonSRX leftIntake;
	public static WPI_TalonSRX rightIntake;
	public static DoubleSolenoid hatch;
	public static DoubleSolenoid shifter;
	public static DoubleSolenoid liftArm;
	public static DifferentialDrive dtProductionRobotDrive;
	public static Compressor compressor;

	private static double rampRateSeconds = 2.5;
	private static double deadBandPercentage = 0.03;
	
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	public static void init() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

		// Production robot uses CAN bus Talon SRX speed controllers
		leftFront = new WPI_TalonSRX(31);
		rightRear = new WPI_TalonSRX(34);
		rightFront = new WPI_TalonSRX(33);
		leftRear = new WPI_TalonSRX(32);

		// Set ramp rate for some level of control
		leftFront.configClosedloopRamp(rampRateSeconds, 0);
		rightRear.configClosedloopRamp(rampRateSeconds, 0);
		rightFront.configClosedloopRamp(rampRateSeconds, 0);
		leftRear.configClosedloopRamp(rampRateSeconds, 0);

		// Set deadband area
		leftFront.configNeutralDeadband(deadBandPercentage, 0);
		rightRear.configNeutralDeadband(deadBandPercentage, 0);
		rightFront.configNeutralDeadband(deadBandPercentage, 0);
		leftRear.configNeutralDeadband(deadBandPercentage, 0);
		
		SpeedControllerGroup leftMotors = new SpeedControllerGroup(leftFront, leftRear);
		SpeedControllerGroup rightMotors = new SpeedControllerGroup(rightFront, rightRear);

		dtProductionRobotDrive = new DifferentialDrive(leftMotors, rightMotors);

		frontLift = new DoubleSolenoid(40, 0, 1); //PCM ID 40, ports 0 and 1
		backLift = new DoubleSolenoid(40, 2, 3); 
		hatch = new DoubleSolenoid(40, 4, 5);
		shifter = new DoubleSolenoid(40, 6, 7);
		liftArm = new DoubleSolenoid(41, 0, 1);

		leftIntake = new WPI_TalonSRX(35);
		rightIntake = new WPI_TalonSRX(36);

		compressor = new Compressor(0);
		compressor.start();

	}
}
